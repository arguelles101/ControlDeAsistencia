package com.ieepo.checador;

import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_READY;
import com.ieepo.checador.components.Imagen;
import com.ieepo.checador.db.ConnectionBD;
import com.ieepo.checador.model.Ct;
import com.ieepo.checador.model.Empleado;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.codec.digest.DigestUtils;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author varguelles
 */
public class AdminToAdmin extends javax.swing.JApplet {

    private ArrayList<Ct> cts;
    private ArrayList<Empleado> empleados;
    private final String USER = "AdminSuper";
    //private final String PASS = "Admin270198Azul756413";
    private final String PASS = "Conasis75d55";

    private final String TITULO = "Control de asistencia";

    private DigitalPersona dp;
    private TimerTask taskHuellas;

    /**
     * Initializes the applet AdminToAdmin
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminToAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminToAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminToAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminToAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(() -> {
                initComponents();

                //fun();
                Imagen iii = new Imagen("com/ieepo/checador/images/logo.png", (int) (jpLogo.getPreferredSize().width * 0.5), jpLogoPng.getPreferredSize().height);
                jpLogoPng.add(iii);
                jpLogoPng.repaint();
                setSize(new Dimension(600, 500));

                cargarCts("");
                cargarEmpleados(cts.get(0).getId_ct(), "");

                jpSection.setVisible(false);

                dp = new DigitalPersona();
                dp.Iniciar();
                dp.start();

                lbTitulo.setText(TITULO);
                lbCt1.setText("");

            });
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(AdminToAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpLogo = new org.jdesktop.swingx.JXPanel();
        jpLogoPng = new org.jdesktop.swingx.JXPanel();
        lbTitulo = new org.jdesktop.swingx.JXLabel();
        lbCt1 = new org.jdesktop.swingx.JXLabel();
        jpSection = new org.jdesktop.swingx.JXPanel();
        cmbCts = new javax.swing.JComboBox<>();
        lbCt = new org.jdesktop.swingx.JXLabel();
        lbEmpleados = new org.jdesktop.swingx.JXLabel();
        cmbEmpleados = new javax.swing.JComboBox<>();
        txtEmpleado = new javax.swing.JTextField();
        txtCt = new javax.swing.JTextField();
        btnPonerAdmin = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jpLogin = new org.jdesktop.swingx.JXPanel();
        btnAcceder = new javax.swing.JButton();
        txtUsuario = new javax.swing.JTextField();
        txtPass = new javax.swing.JPasswordField();
        lbError = new org.jdesktop.swingx.JXLabel();
        lbUser = new org.jdesktop.swingx.JXLabel();
        lbPass = new org.jdesktop.swingx.JXLabel();

        setPreferredSize(new java.awt.Dimension(600, 500));

        jpLogo.setBackground(new java.awt.Color(255, 255, 255));
        jpLogo.setPreferredSize(new java.awt.Dimension(600, 100));

        jpLogoPng.setBackground(new java.awt.Color(255, 255, 255));
        jpLogoPng.setPreferredSize(new java.awt.Dimension(350, 78));

        javax.swing.GroupLayout jpLogoPngLayout = new javax.swing.GroupLayout(jpLogoPng);
        jpLogoPng.setLayout(jpLogoPngLayout);
        jpLogoPngLayout.setHorizontalGroup(
            jpLogoPngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        jpLogoPngLayout.setVerticalGroup(
            jpLogoPngLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        lbTitulo.setForeground(new java.awt.Color(51, 102, 255));
        lbTitulo.setText("Titulo");
        lbTitulo.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N

        lbCt1.setForeground(new java.awt.Color(51, 102, 255));
        lbCt1.setText("Titulo");
        lbCt1.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N

        javax.swing.GroupLayout jpLogoLayout = new javax.swing.GroupLayout(jpLogo);
        jpLogo.setLayout(jpLogoLayout);
        jpLogoLayout.setHorizontalGroup(
            jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpLogoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                .addComponent(jpLogoPng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpLogoLayout.setVerticalGroup(
            jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLogoLayout.createSequentialGroup()
                .addGroup(jpLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpLogoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jpLogoPng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpLogoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpSection.setBackground(new java.awt.Color(255, 255, 255));
        jpSection.setPreferredSize(new java.awt.Dimension(600, 400));

        cmbCts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCtsItemStateChanged(evt);
            }
        });

        lbCt.setText("CTs:");

        lbEmpleados.setText("Empleados:");

        cmbEmpleados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpleadoKeyReleased(evt);
            }
        });

        txtCt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCtKeyReleased(evt);
            }
        });

        btnPonerAdmin.setText("Poner de administrador de ct");
        btnPonerAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPonerAdminActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setBorderPainted(false);
        btnSalir.setContentAreaFilled(false);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpSectionLayout = new javax.swing.GroupLayout(jpSection);
        jpSection.setLayout(jpSectionLayout);
        jpSectionLayout.setHorizontalGroup(
            jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSectionLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPonerAdmin)
                    .addGroup(jpSectionLayout.createSequentialGroup()
                        .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(txtCt, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(cmbCts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEmpleados, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(209, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpSectionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addContainerGap())
        );
        jpSectionLayout.setVerticalGroup(
            jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSalir)
                .addGap(23, 23, 23)
                .addComponent(txtCt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(txtEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(btnPonerAdmin)
                .addGap(113, 113, 113))
        );

        jpLogin.setBackground(new java.awt.Color(255, 255, 255));
        jpLogin.setPreferredSize(new java.awt.Dimension(600, 400));

        btnAcceder.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnAcceder.setText("Acceder");
        btnAcceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccederActionPerformed(evt);
            }
        });

        txtUsuario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtPass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPassKeyReleased(evt);
            }
        });

        lbError.setForeground(new java.awt.Color(255, 0, 0));
        lbError.setText(" ");

        lbUser.setText("Usuario:");
        lbUser.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lbPass.setText("Contraseña");
        lbPass.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout jpLoginLayout = new javax.swing.GroupLayout(jpLogin);
        jpLogin.setLayout(jpLoginLayout);
        jpLoginLayout.setHorizontalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPass, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnAcceder)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPass, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(lbError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jpLoginLayout.setVerticalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(lbError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addComponent(btnAcceder)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCtsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCtsItemStateChanged
        // TODO add your handling code here:
        if (cmbCts.getSelectedIndex() == -1) {
            return;
        }
        Ct ct = cts.get(cmbCts.getSelectedIndex());
        int id_ct = ct.getId_ct();
        cargarEmpleados(id_ct, "");
        txtEmpleado.setText("");
    }//GEN-LAST:event_cmbCtsItemStateChanged

    private void txtCtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCtKeyReleased
        // TODO add your handling code here:
        String cad = txtCt.getText().trim();
        if (evt.getKeyCode() == 10) {
            return;
        }
        cargarCts(cad);
    }//GEN-LAST:event_txtCtKeyReleased

    private void txtEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpleadoKeyReleased
        // TODO add your handling code here:
        String cad = txtEmpleado.getText().trim();
        int id_ct = cts.get(cmbCts.getSelectedIndex()).getId_ct();
        if (evt.getKeyCode() == 10) {
            return;
        }
        cargarEmpleados(id_ct, cad);
    }//GEN-LAST:event_txtEmpleadoKeyReleased

    private void btnAccederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccederActionPerformed
        // TODO add your handling code here:
        String user = txtUsuario.getText();
        String pass = txtPass.getText();

        lbError.setText("");
        /*if (USER.equals(user) && PASS.equals(pass)) {
            jpLogin.setVisible(false);
            jpSection.setVisible(true);
            txtCt.setText("");
            txtEmpleado.setText("");
        } else {
            lbError.setText("Datos incorrectos");
            txtUsuario.setText("");
            txtPass.setText("");
            txtUsuario.requestFocus();
        }*/
        fun(user, pass);
    }//GEN-LAST:event_btnAccederActionPerformed

    private void btnPonerAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPonerAdminActionPerformed
        // TODO add your handling code here:
        int id_empleado = empleados.get(cmbEmpleados.getSelectedIndex()).getIdEmpleado();

        dp.clear();

        Timer tiempo;

        tiempo = new Timer();
        taskHuellas = new TimerTask() {
            int contador = 1;

            @Override
            public void run() {
                //contador++;
                if (dp.Reclutador.getFeaturesNeeded() == 4 && contador == 1) {
                    JOptionPane.showMessageDialog(null, "Ponga su dedo en el dispositivo", "", JOptionPane.INFORMATION_MESSAGE);
                    contador++;
                }
                if (dp.Reclutador.getFeaturesNeeded() == 3 && contador == 2) {

                    JOptionPane.showMessageDialog(null, "Una vez mas por favor!", "", JOptionPane.INFORMATION_MESSAGE);
                    contador++;
                }
                if (dp.Reclutador.getFeaturesNeeded() == 2 && contador == 3) {
                    JOptionPane.showMessageDialog(null, "Otra vez por favor", "", JOptionPane.INFORMATION_MESSAGE);
                    contador++;
                }
                if (dp.Reclutador.getFeaturesNeeded() == 1 && contador == 4) {
                    JOptionPane.showMessageDialog(null, "La ultima vez, ponga su dedo en el dispositivo!!", "", JOptionPane.INFORMATION_MESSAGE);
                    contador++;
                }
                if (dp.Reclutador.getFeaturesNeeded() == 0 && contador == 5) {
                    JOptionPane.showMessageDialog(null, "Listo huella guardada", "", JOptionPane.INFORMATION_MESSAGE);
                    contador++;
                }
                if (dp.estadoHuellas() == TEMPLATE_STATUS_READY) {
                    try {
                        ByteArrayInputStream datosHuella = new ByteArrayInputStream(dp.getTemplate().serialize());
                        Integer tamanioHuella = dp.getTemplate().serialize().length;

                        ConnectionBD sql = new ConnectionBD();
                        Connection cn = sql.conectar();
                        PreparedStatement ps = cn.prepareStatement("INSERT INTO huella(idempleado, huella, dedomano) VALUES (?,?, ?)");
                        ps.setInt(1, id_empleado); ///////////////////////////////////////////////////////////////////////// id_empleado
                        ps.setBinaryStream(2, datosHuella, tamanioHuella);
                        ps.setString(3, "2d");
                        ps.executeUpdate();

                        int id_ct = cts.get(cmbCts.getSelectedIndex()).getId_ct();

                        ps = cn.prepareStatement("INSERT INTO admincts(idempleado, idct) VALUES (?,?)");
                        ps.setInt(1, id_empleado);
                        ps.setInt(2, id_ct);

                        ps.executeUpdate();

                        taskHuellas.cancel();
                    } catch (SQLException ex) {
                        Logger.getLogger(ChecadorI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        tiempo.schedule(taskHuellas, 0, 1000);


    }//GEN-LAST:event_btnPonerAdminActionPerformed

    private void txtPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            btnAccederActionPerformed(null);
        }
    }//GEN-LAST:event_txtPassKeyReleased

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        jpLogin.setVisible(true);
        jpSection.setVisible(false);
        txtUsuario.setText("");
        txtPass.setText("");
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cargarCts(String cadena) {
        ConnectionBD sql = new ConnectionBD();
        Connection cn = sql.conectar();
        try {
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM cts WHERE domicilio LIKE ? ORDER BY domicilio");
            consulta.setString(1, "%" + cadena + "%");
            ResultSet resultado = consulta.executeQuery();
            cts = new ArrayList<>();
            while (resultado.next()) {
                int id_ct;
                String clave;
                String domicilio;

                id_ct = resultado.getInt("idct");
                clave = resultado.getString("clave");
                domicilio = resultado.getString("domicilio");

                Ct c = new Ct(id_ct, clave, domicilio);
                cts.add(c);
            }

            cmbCts.removeAllItems();

            cts.forEach((ct) -> {
                cmbCts.addItem(ct.toString());
            });
            txtEmpleado.setText("");
        } catch (SQLException ex) {
            Logger.getLogger(ChecadorI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            sql.desconectar();
        }
    }

    private void cargarEmpleados(int id_ct, String cadena) {
        ConnectionBD sql = new ConnectionBD();
        Connection cn = sql.conectar();
        try {
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM empleados WHERE idct = ? AND (nombre LIKE ? OR appaterno LIKE ? OR apmaterno LIKE ?) ORDER BY nombre");
            consulta.setInt(1, id_ct);
            consulta.setString(2, "%" + cadena + "%");
            consulta.setString(3, "%" + cadena + "%");
            consulta.setString(4, "%" + cadena + "%");
            ResultSet resultado = consulta.executeQuery();
            empleados = new ArrayList<>();
            System.out.println("consulta = " + consulta);
            while (resultado.next()) {
                int idEmpleado;
                String nombre;
                String apPaterno;
                String apMaterno;
                String rfc;
                int idct;

                idEmpleado = resultado.getInt("idempleado");
                nombre = resultado.getString("nombre").trim();
                apPaterno = resultado.getString("apPaterno").trim();
                apMaterno = resultado.getString("apMaterno").trim();
                rfc = resultado.getString("rfc").trim();
                idct = resultado.getInt("idct");

                Empleado e = new Empleado(idEmpleado, nombre, apPaterno, apMaterno, rfc, idct);
                empleados.add(e);
            }

            cmbEmpleados.removeAllItems();
            if (empleados.isEmpty()) {
                cmbEmpleados.addItem("Sin empleados");
            }
            empleados.forEach((empleado) -> {
                cmbEmpleados.addItem(empleado.toString());
            });

        } catch (SQLException ex) {
            Logger.getLogger(ChecadorI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            sql.desconectar();
        }
    }

    private void fun(String usuario, String pass) {
//        String usuario = "varguelles";
        //      String pass = "varguelles";
        ConnectionBD sql = new ConnectionBD();
        Connection cn = sql.conectar();
        try {
            PreparedStatement consulta;
            consulta = cn.prepareStatement("SELECT * FROM sis_usuarios WHERE usuario in "
                    + "(SELECT usuario FROM sis_usuarios_roles WHERE rol = 'admin') "
                    + "AND usuario = ?");
            consulta.setString(1, usuario);
            ResultSet resultado = consulta.executeQuery();
            if (resultado.next()) {
                if (DigestUtils.md5Hex(pass).equals(resultado.getString("pass"))) {
                    jpLogin.setVisible(false);
                    jpSection.setVisible(true);
                    txtCt.setText("");
                    txtEmpleado.setText("");
                    lbCt1.setText(resultado.getString("nombre"));
                } else {
                    lbError.setText("Contraseña incorrecta");
                    txtPass.setText("");
                    txtPass.requestFocus();
                }
                //System.out.println(resultado.getString("rol"));
            } else {
                lbError.setText("Usuario no encontrado");
                txtUsuario.setText("");
                txtPass.setText("");
                txtUsuario.requestFocus();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChecadorI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            sql.desconectar();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceder;
    private javax.swing.JButton btnPonerAdmin;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbCts;
    private javax.swing.JComboBox<String> cmbEmpleados;
    private org.jdesktop.swingx.JXPanel jpLogin;
    private org.jdesktop.swingx.JXPanel jpLogo;
    private org.jdesktop.swingx.JXPanel jpLogoPng;
    private org.jdesktop.swingx.JXPanel jpSection;
    private org.jdesktop.swingx.JXLabel lbCt;
    private org.jdesktop.swingx.JXLabel lbCt1;
    private org.jdesktop.swingx.JXLabel lbEmpleados;
    private org.jdesktop.swingx.JXLabel lbError;
    private org.jdesktop.swingx.JXLabel lbPass;
    private org.jdesktop.swingx.JXLabel lbTitulo;
    private org.jdesktop.swingx.JXLabel lbUser;
    private javax.swing.JTextField txtCt;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
